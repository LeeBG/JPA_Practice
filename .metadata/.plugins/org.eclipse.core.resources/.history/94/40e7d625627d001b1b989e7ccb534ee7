package com.cos.myjpa.web.user;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cos.myjpa.domain.user.User;
import com.cos.myjpa.domain.user.UserRepository;
import com.cos.myjpa.web.dto.CommonRespDto;
import com.cos.myjpa.web.user.dto.UserJoinReqDto;
import com.cos.myjpa.web.user.dto.UserLoginReqDto;
import com.cos.myjpa.web.user.dto.UserRespDto;

import lombok.RequiredArgsConstructor;

@CrossOrigin
@RequiredArgsConstructor
@RestController
public class UserController{
	
	private final UserRepository userRepository;
	private final HttpSession session; 	//DI	
	
	@GetMapping("/user")	//유저를 들고옴
	public CommonRespDto<?> findAll(){
		List<User> usersEntity = userRepository.findAll();
		List<UserRespDto> userRespDtos = new ArrayList<>();
		for (User user : usersEntity) {
			userRespDtos.add(new UserRespDto(user));
		}
		
//		List<UserRespDto> userRespDtos = new ArrayList<>();
//		usersEntity.stream().forEach((u)->{
//			userRespDtos.add(new UserRespDto(u));
//		});
		
//		List<UserRespDto> userRespDtos = usersEntity.stream().map((u)->{
//			return new UserRespDto(u);
//		}).collect(Collectors.toList());
		
		
		return new CommonRespDto<>(1,"성공",userRespDtos);
	}
	
	@GetMapping("/user/{id}")	//유저를 들고옴
	public CommonRespDto<?> findById(@PathVariable Long id){
		//옵셔널 get(), orElseGet(), orElseThrow()
		User userEntity = userRepository.findById(id).orElseThrow(()->{
			return new IllegalArgumentException("id를 찾을 수 없습니다."); //잘못된 인수가 들어온 오류이기 때문
		});			//.get() = Optional 안에 있는데이터를 꺼내라는 것
		
		UserRespDto userRespDto = new UserRespDto(userEntity);		//DTO
				
		return new CommonRespDto<>(1,"성공",userRespDto);
	}
	
	@GetMapping("/user/{id}/post")	//유저를 들고옴
	public CommonRespDto<?> profile(@PathVariable Long id){
		
		User userEntity = userRepository.findById(id).orElseThrow(()->{
			return new IllegalArgumentException("id를 찾을 수 없습니다."); //잘못된 인수가 들어온 오류이기 때문
		});			//.get() = Optional 안에 있는데이터를 꺼내라는 것
		
		return new CommonRespDto<>(1,"성공",userEntity);
	}
	
	@PostMapping("/join")		//auth(인증)
	public CommonRespDto<?> join(@RequestBody UserJoinReqDto userJoinReqDto){
		User userEntity = userRepository.save(userJoinReqDto.toEntity());
		return new CommonRespDto<>(1,"성공",userEntity);
	}
	
	@PostMapping("/login")		//login(로그인)
	public CommonRespDto<?> login(@RequestBody UserLoginReqDto userLoginReqDto){
		User userEntity = userRepository.findByUsernameAndPassword(userLoginReqDto.getUsername(), userLoginReqDto.getPassword());
		if(userEntity==null) {
			return new CommonRespDto<>(-1,"실패",null);
		}else {
			userEntity.setPassword(null);			//패스워드를 그대로 넘기는 것은 위험한 일
			session.setAttribute("principal", userEntity);
			return new CommonRespDto<>(1,"성공",userEntity);
		}
	}
	
	//샘플
	@GetMapping("/test/user/{id}")	//유저 정보
	public CommonRespDto<?> userInfo(@PathVariable Long id){
		User principal = (User) session.getAttribute("principal");
		if(principal == null) {
			return new CommonRespDto<>(-1,"실패",null);
		}else {
			User userEntity = userRepository.findById(id).get();
			return new CommonRespDto<>(1,"성공",userEntity);
		}
	}
}
